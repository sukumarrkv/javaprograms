<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;names.stream().collect(Collectors.joining(&quot;,&quot;))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.StreamsRunner.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;names.stream().collect(Collectors.joining(&quot;,&quot;))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{StreamsRunner.java" name="collect" replace="true" selection="279 47" stamp="1657954789475" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getEmployeeGender))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method1()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getEmployeeGender))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="collect" replace="true" selection="1678 81" stamp="1657955215475" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().filter(e -&gt; e.getEmployeeGender().equals(&quot;Female&quot;)).collect(Collectors.averagingInt(Employee::getEmployeeAge))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method3()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().filter(e -&gt; e.getEmployeeGender().equals(&quot;Female&quot;)).collect(Collectors.averagingInt(Employee::getEmployeeAge))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="collect" replace="true" selection="2627 132" stamp="1657956505663" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;max&apos; from expression &apos;employeeList.stream().max((e1,e2) -&gt; Double.compare(e1.getSalary(),e2.getSalary()))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;max&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method4()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().max((e1,e2) -&gt; Double.compare(e1.getSalary(),e2.getSalary()))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;max&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="max" replace="true" selection="2998 83" stamp="1657968476821" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.averagingDouble(Employee::getSalary))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method7()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.averagingDouble(Employee::getSalary))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="collect" replace="true" selection="3980 78" stamp="1657969400208" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;employee&apos; from expression &apos;employeeList.stream().sorted((e1,e2) -&gt; Integer.compare(e1.getYearOfJoining(),e2.getYearOfJoining())).findFirst().get()&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;employee&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method9()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().sorted((e1,e2) -&gt; Integer.compare(e1.getYearOfJoining(),e2.getYearOfJoining())).findFirst().get()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;employee&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="employee" replace="true" selection="4699 118" stamp="1657970344883" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method12()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.groupingBy(Employee::getDepartment))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="collect" replace="true" selection="5660 77" stamp="1657971327656" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.summarizingDouble(Employee::getSalary))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method13()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.summarizingDouble(Employee::getSalary))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="collect" replace="true" selection="6142 80" stamp="1657973782961" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;collect&apos; from expression &apos;employeeList.stream().collect(Collectors.partitioningBy(e -&gt; e.getEmployeeAge() &gt; 25))&apos;&#x0D;&#x0A;- Original project: &apos;Misc&apos;&#x0D;&#x0A;- Variable name: &apos;collect&apos;&#x0D;&#x0A;- Destination method: &apos;com.practice.streams.EmployeeStreamsRunner.method14()&apos;&#x0D;&#x0A;- Variable expression: &apos;employeeList.stream().collect(Collectors.partitioningBy(e -&gt; e.getEmployeeAge() &gt; 25))&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;collect&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.practice.streams{EmployeeStreamsRunner.java" name="collect" replace="true" selection="6600 84" stamp="1657974351666" version="1.0"/>
</session>